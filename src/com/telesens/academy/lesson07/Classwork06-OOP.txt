# Задачи на Объектно Ориентированное Программирование

=====================================================
Шилдт "Руководство для начинающих" 6 изд.
стр. 127-156
стр. 203-242
=====================================================

1) Предположим, имеется следующий класс.
	class SomeNumber {
		private int n; // единственное поле класса
		// ...
		}

	a) Реализуйте конструктор без параметров (по умолчанию инициализируем 0)
	b) Конструктор, с одним параметром (int n)
	c) Метод int getN();
	d) Метод int setN();
	e) Метод print();
			который выводит строку, напр: "Число: 5"
	f) Метод boolean isPositive(); // которые возвращает true, если число положительное и false, если число отрицательное

2) Создайте класс TestSomeNumber, в котором продемонстрируйте работу класса SomeNumber
		на нескольких тестовых данных [-10, -1, 0, 1, 15]
	a) проверить работу конструкторов
	b) проверить работу метода setN();
	c) проверить работу метода isPositive();

3а) Класс Currency для работы с денежными суммами.
	- Класс должен быть представлен двумя private полями:
			double value; для хранения значания суммы
			String name; для хранения названия валюты ("грн", "руб", "$")

	Реализовать 2 конструктора:
		- без параметров
		- и с двумя параметрами, которые принимает (double value, String name);
		- конструктор копирования: (Currency currency)

	- Реализовать метод отображения суммы на экран print();
		Напр. в виде: 154.65руб // отображать не более 2 знаков после запятой

	- Реализовать операцию сравнения:
		boolean isEqual(Currency currency); // вернет true, если и значение и строка - совпадают

	- Реализовать методы:
		void add(double value, String name); // метод сложения
			(если name отличается от текущего поля 'name', то сложение не производить,
			а вывести сообщение об ошибке ("Error: currency names are differ 'грн' - 'руб')
		void add(Currency currency); // метод сложения

		void substract(double value, String name); // метод вычитания ...
		void substract(Currency currency);

		void divide(double factor); // деление суммы на число
		void multiply(double factor); // умножение суммы на число

3б) Реализовать класс TestCurrency, который тестирует функционал класса Currency из предыдущей задачи:
	- проверить работу конструкторов
	- проверить работу методов сложения, вычитаня, деления и умножения
	- проверить работу метода isEqual
		Напр. метод тестирования сложения может иметь следующую сигнатуру:
			public boolean testAdd() {
				// код теста...
				return true; // eсли тест успешный или 'false', если не успешный
			}

	- все тесты запускаются в функции main
	- каждые тест - отдельная функция - void testIsEqual(), void testDefaultConstructor() и т.д.
	- в процессе тестирования выводить информацию о ходе теста на консоль
	- * реализовать возможность запускать выборочно тесты в диалоговом режиме (или через аргумент командной строки)

4) Реализовать класс Abonent, который имеет поля:
		long id; // необязательное поле, по умолчанию -1
		String firstName;
		String lastName;
		int age;
		char gender; // 'm' - male, 'f' - female

	Все поля должны быть помечены модификатором private
		- реализовать доступ к полям через методы set и get
		- реализовать возможность создания класса через два конструктора:
			1-> все поля, без обязательного поля "id"
			2-> полный конструктор со всем полями

	- реализовать метод void print(); вывода информации абонента в отформатированном виде
	- реализовать метод boolean isEquals(Abonent abonent); // вернут true, если id обоих объектов равны и не равны -1, false - в остальных случаях
	- протестировать метод isEquals

5)* Создать класс Date, который имеет следующие поля:
		- день
		- месяц
		- год

		Все поля должны быть помечены модификатором private
		- реализовать доступ к полям через методы set и get
		-* реализовать статический метод checkData(int day, int month, int year), который проверяет существование введенной даты
		-* использовать проверку checkData, при попытке изменить поле метод set, в случае ошибки не проводить изменение,
			а вывести сообщение об ошибке на консоль
		-** реализовать метод differenceIdDays(int day, int month, int year), который принимает другую дату и вычисляет разницу в
			днях между датами
		- протестировать работу методов

6) Практика.
	a) Реализовать класс Button, который имеет следующие поля:
		- ширина (width)
		- высота (height)
		- надпись (text)
		- цвет фона (backgroundColor)
		- цвет текста (textColor)
		- статус enabled (активна/неактивна)

		Все поля должны быть помечены модификатором private
		- реализовать доступ к полям через методы set и get

		- реализовать возможность создания класса, с помощью перегруженных конструкторов
		- реализовать метод print, который выводит информацию о кнопке в отформатированном виде
		- реализовать методы changeSize
		- реализовать методы changeFontColor, changeBackgroundColor (перегруженные методы)
	....
7) Протестировать класс Button